const prices = require('./price.json');
const { SMA, RSI, BollingerBands, EMA } = require('technicalindicators');

// –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è RSI —Å –ø–µ—Ä–∏–æ–¥–æ–º 14
const rsiPeriod = 14;
const rsi = RSI.calculate({ period: rsiPeriod, values: prices.map(price => price.close) });
// –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è MA –≤–Ω—É—Ç—Ä–∏ BB —Å –ø–µ—Ä–∏–æ–¥–æ–º 20
const bbPeriod = 20;
const bb = BollingerBands.calculate({ period: bbPeriod, stdDev: 2, values: prices.map(price => price.close) });

// –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –î–∏—Å–ø–µ—Ä—Å–∏–∏ –≤–æ–∫—Ä—É–≥ MA (sigma) = 0.01
const sigma = 0.01;
const ma = SMA.calculate({ period: bbPeriod, values: prices.map(price => price.close) });
const dev = bb.map(b => b.upper - b.lower);
const forMult = 2;
const sigmaDev = dev.map(d => d * sigma);
const upper = ma.map((m, i) => m + sigmaDev[i]);
const lower = ma.map((m, i) => m - sigmaDev[i]);
const closePrices = prices.map(price => price.close);
// –°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É
const basis = EMA.calculate({ period: bbPeriod, values: rsi });
const buySignal = basis[basis.length - 1] + ((upper[upper.length - 1] - lower[lower.length - 1]) * sigma);
// –°–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
const sellSignal = basis[basis.length - 1] - ((upper[upper.length - 1] - lower[lower.length - 1]) * sigma);

const pricesClose = prices.map(candle => candle.close);
const currentPrice = prices[prices.length - 1].close;
const prevPrice = prices[prices.length - 2].close;
const priceChange = currentPrice - prevPrice;
const priceChangePercent = (priceChange / prevPrice) * 100;
const prevPriceMin = prices[prices.length - 2].low;
const prevPriceMax = prices[prices.length - 2].high;

const rsi1h = rsi[rsi.length - 1].toFixed(2)

const overbought1h = rsi1h == 70;
const overdohuyabought1h = rsi1h >= 71;
const oversold1h = rsi1h == 30;
const overdohuyasold1h = rsi1h <= 28;

const overboughtPrice = currentPrice - ((currentPrice - closePrices[closePrices.length - 2]) * (rsi1h));
const oversoldPrice = currentPrice + ((currentPrice - closePrices[closePrices.length - 2]) * (rsi1h));

let recommendation = '-';

if (rsi1h < overbought1h && rsi1h < overdohuyabought1h && rsi1h > buySignal && currentPrice < prevPriceMax) { //–≤–µ—Ä—Ö–Ω–∏–π –ø–æ—Ä–æ–≥ –ø—Ä–æ–¥–∞–∂–∞
recommendation = '–ø—Ä–æ–¥–∞–∂–∞ üì§';
} else if (rsi1h == overbought1h || rsi1h == overdohuyabought1h) { //–∫—Ä–∞–π –≤–µ—Ä—Ö–∞
recommendation = '–ø—Ä–æ–¥–∞–∂–∞ üì§';
} else if (rsi1h < sellSignal && currentPrice < prevPriceMin && rsi1h > oversold1h && rsi1h > overdohuyasold1h ) { //–Ω–∏–∂–Ω–∏–π –ø–æ—Ä–æ–≥ –ø—Ä–æ–¥–∞–∂–∞ 
recommendation = '–ø—Ä–æ–¥–∞–∂–∞ üì§';
} else if (rsi1h > oversold1h && rsi1h <= sellSignal && currentPrice > prevPriceMin) { //–Ω–∏–∂–Ω–∏–π –ø–æ—Ä–æ–≥ –ø–æ–∫—É–ø–∫–∞
recommendation = '–ø–æ–∫—É–ø–∫–∞ üì•';
} else if (rsi1h == overdohuyasold1h || rsi1h == oversold1h ) { //–∫—Ä–∞–π –Ω–∏–∑–∞
recommendation = '–ø–æ–∫—É–ø–∫–∞ üì•';
} else if (rsi1h >= buySignal && currentPrice > prevPriceMin && rsi1h > overbought1h) { //–≤–µ—Ä—Ö–Ω–∏–π –ø–æ—Ä–æ–≥ –ø–æ–∫—É–ø–∫–∞
recommendation = '–ø–æ–∫—É–ø–∫–∞ üì•';
} else if (rsi1h >= sellSignal && rsi <= buySignal) {
recommendation = '–±–æ–∫–æ–≤–∏–∫ ‚ùå';

console.log(`–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${currentPrice.toFixed(2)}`);
console.log(`–ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${priceChange.toFixed(2)} (${priceChangePercent.toFixed(2)}%)`);
console.log(`–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: ${recommendation}`);
console.log(`–ò–Ω–¥–µ–∫—Å –ü–µ—Ä–µ–∫—É–ø/–ü–µ—Ä–µ–ø—Ä–æ–¥
      >–û–¢ 30.00 –î–û 70.00<
                > ${rsi1h} <
 ${oversold1h ? '–ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–æ üò¨ –ü–û–ö–£–ü–ê–ô!' : overbought1h ? '–ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ üò¨ –ü–†–û–î–ê–í–ê–ô!' : overdohuyasold1h ? '–ê—Ö—É–µ—Ç—å –∫–∞–∫ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–æ üòµ –ó–û–ù–ê –ê–ö–¢–ò–í–ù–û–ô –ü–û–ö–£–ü–ö–ò!' : overbought1h ? '–ê—Ö—É–µ—Ç—å –∫–∞–∫ –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ üòµ –ó–û–ù–ê –ê–ö–¢–ò–í–ù–û–ô –ü–†–û–î–ê–ñ–ò!' : 'üö¨üö¨ –ñ–¥–∏ –ø—Ä–æ—Ñ–∏—Ç–∞ üö¨üö¨'}`);
